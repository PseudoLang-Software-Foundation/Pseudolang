name: Build and Test Pseudolang

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Run Tests
        run: cargo test --verbose

  build:
    name: Build Multi-Platform
    needs: test
    runs-on: windows-latest
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-gnu
          - x86_64-unknown-linux-gnu
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Install Cross
        run: cargo install cross

      - name: Build Release
        run: cross build --release --target ${{ matrix.target }}

      - name: Prepare Artifacts
        run: |
          mkdir -p release
          if [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ]; then
            cp target/${{ matrix.target }}/release/fplc.exe release/fplc-x64.exe
          else
            cp target/${{ matrix.target }}/release/fplc release/fplc-linux-x64
            chmod +x release/fplc-linux-x64
          fi

      - name: Install NSIS
        if: matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          choco install nsis -y
          
      - name: Prepare Installer Files
        if: matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          mkdir -p installer
          copy target\${{ matrix.target }}\release\fplc.exe installer\fplc.exe
          copy LICENSE installer\
          copy installer\Pseudolang-Logo.ico installer\
          
      - name: Build Installer
        if: matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          makensis installer\pseudolang.nsi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pseudolang-${{ matrix.target }}
          path: |
            release/*
            release/installer/*
          retention-days: 7

  publish:
    name: Publish Artifacts
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release Directory
        run: |
          mkdir -p final_release
          cp -r artifacts/*/* final_release/
          
      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pseudolang-all-platforms
          path: final_release/*
          retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/pseudolang-x86_64-pc-windows-gnu/release/installer/pseudolang-setup-x64.exe
            artifacts/pseudolang-x86_64-pc-windows-gnu/release/fplc-x64.exe
            artifacts/pseudolang-x86_64-unknown-linux-gnu/release/fplc-linux-x64
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
